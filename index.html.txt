<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <style>
        body { font-family: Arial, sans-serif; text-align: center; }
        .container { width: 300px; margin: auto; }
        button { margin: 5px; padding: 10px; }
        #xp-fill { height: 20px; background-color: blue; width: 0%; }
        #store, #inventory { display: none; border: 1px solid #ccc; padding: 10px; margin-top: 10px; }

     #mine {
    width: 100px;
    height: 100px;
    border-radius: 50%; /* Ensures the button is circular */
    object-fit: cover; /* Makes sure the image fits inside the circle */
    cursor: pointer;
    display: block;
    margin: 20px auto; /* Centers it horizontally */
    transition: filter 0.3s ease-in-out; /* Smooth effect for cooldown */
}


        .tap-button:active {
            background-color: darkred;
        }

        /* üéØ Info Button for Store Items */
        .info-button {
            background-color: transparent;
            border: none;
            font-size: 16px;
            cursor: pointer;
            margin-left: 5px;
        }

        .main-container {
    width: 90%;
    max-width: 400px;
    margin: auto;
    padding: 20px;
    background-color: #20B2AA;
    border-radius: 10px;
    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
    text-align: center;
}

.mine-container {
    display: flex;
    justify-content: center; /* Centers the button horizontally */
    width: 100%; /* Ensures full width */
    margin-top: 0px; /* Keeps it at the same height */
}


/* HUD Styling */
.hud {
    display: flex;
    justify-content: space-around;
    background-color: #Bf00ff;
    color: white;
    padding: 10px;
    border-radius: 8px;
    margin-bottom: 10px;
    font-size: 14px;
    font-weight: bold;
}
.hud-item {
    flex: 1;
    text-align: center;
}

/* XP Bar Styling */
.xp-container {
    background-color: #Bf00ff;
    padding: 5px;
    border-radius: 5px;
    margin-bottom: 10px;
}
#xp-bar {
    width: 100%;
    background-color: gray;
    height: 20px;
    border-radius: 5px;
    overflow: hidden;
}
#xp-fill {
    height: 100%;
    background-color: yellow;
    width: 0%;
    transition: width 0.3s ease-in-out;
}


    </style>
</head>


<body>
    <h1>BuCoin Mining</h1>
    <div class="container">
        <div class="main-container">
    <!-- üéØ Bulldog Companion Image -->
<div class="hud">
    <div class="hud-item">üí∞ Coins: <span id="coins">0</span></div>
    <div class="hud-item">‚õèÔ∏è Level: <span id="miner_level">1</span></div>
    <div class="hud-item">‚ö° Energy: <span id="energy">100</span></div>
</div>

<img src="{{ url_for('static', filename='bulldog_running.gif') }}" alt="Mining Bulldog" width="250" height="auto">

<div class="xp-container">
    <div id="xp-bar"><div id="xp-fill"></div></div>
    <p>XP: <span id="miner_exp">0</span> / <span id="exp_needed"></span></p>
</div>

        <h3>Cooldown: <span id="cooldown_timer">0</span> sec</h3>
        <div id="energy-bar"><div id="energy-fill"></div></div>

        <div class="mine-container">
        <img id="mine" src="{{ url_for('static', filename='BuCoin.png') }}"
         alt="Tap to Mine" width="100" height="100">
</div>



        <button onclick="toggle('store')">Store</button>
        <button onclick="toggle('inventory')">Inventory</button>
        <button id="upgrade">Upgrade Miner</button>
        <button onclick="toggle('menu')">Menu</button>
<div id="menu" style="display: none;">
    <button onclick="toggle('leaderboard')">View Leaderboard</button>
</div>

<div id="leaderboard" style="display: none;">
    <h2>Leaderboard</h2>
    <p>Loading leaderboard...</p>
</div>

<div id="inventory">
    <div id="inventory-items">Empty</div>
</div>



        <div id="store">
    <h3>Store</h3>

    <!-- Energy Pack -->
    <button id="buy-energy-pack">Buy Energy Pack (10 coins)</button>
    <button class="info-button" onclick="showInfo('energy')">‚ùì</button><br>


    <!-- Pickaxe -->
    <button id="buy-pickaxe">Buy Pickaxe (10 coins)</button>
    <button class="info-button" onclick="showInfo('pickaxe')">‚ùì</button>
</div>



    <script>
        let cooldownTime = 10; // Base cooldown time (default 10 seconds)
let lastMineTime = 0; // Tracks last mining timestamp

async function mine() {
    let now = Date.now() / 1000; // Get current time in seconds
    let timeSinceLastMine = now - lastMineTime;
    let minerLevel = parseInt(document.getElementById('miner_level').innerText) || 1;
    let currentCooldown = Math.max(1, cooldownTime - (minerLevel - 1)); // Reduce cooldown per level

    if (timeSinceLastMine < currentCooldown) {
        alert(`Cooldown active! Wait ${Math.ceil(currentCooldown - timeSinceLastMine)} sec.`);
        return;
    }

    lastMineTime = now; // Update last mine time
    let response = await fetch('/mine', { method: 'POST' });

    if (response.ok) {
        updateUI(await response.json());
        disableMineButton(currentCooldown);  // üéØ Move this inside the correct block
    } else {
        alert((await response.json()).message);
    }
}


// Update cooldown timer every second
function updateCooldown() {
    let now = Date.now() / 1000;
    let timeSinceLastMine = now - lastMineTime;
    let minerLevel = parseInt(document.getElementById('miner_level').innerText) || 1;
    let currentCooldown = Math.max(1, cooldownTime - (minerLevel - 1));

    let timeLeft = Math.max(0, Math.ceil(currentCooldown - timeSinceLastMine));
    document.getElementById('cooldown_timer').innerText = timeLeft; // Remove this line

    setTimeout(updateCooldown, 1000); // Keep the function running
}



// Start cooldown timer update loop
updateCooldown();

        document.getElementById('buy-energy-pack').onclick = () => action('/buy_energy_pack');
        document.getElementById('buy-pickaxe').onclick = () => action('/buy_pickaxe');
        document.getElementById('upgrade').onclick = () => action('/upgrade_miner');
        document.getElementById('mine').onclick = mine;

        async function action(url) {
            let response = await fetch(url, { method: 'POST' });
            if(response.ok) updateUI(await response.json());
            else alert((await response.json()).message);
        }

function disableMineButton(cooldown) {
    let mineButton = document.getElementById('mine');
    mineButton.style.pointerEvents = "none";  // Disable clicking
    mineButton.style.filter = "grayscale(100%)";  // Make the button gray

    setTimeout(() => {
        mineButton.style.pointerEvents = "auto";  // Re-enable clicking
        mineButton.style.filter = "grayscale(0%)";  // Restore color
    }, cooldown * 1000);
}


        async function fetchStatus(){
            let response = await fetch('/get_status');
            if(response.ok) updateUI(await response.json());
        }

function updateUI(data){
    const xpRequirements = {
        1: 500, 2: 1500, 3: 3000, 4: 5000, 5: 7500,
        6: 10500, 7: 14000, 8: 18000, 9: 22500
    };
    const expNeeded = xpRequirements[data.miner_level] || 25000;

    document.getElementById('coins').innerText = data.coins;
    document.getElementById('energy').innerText = Math.max(0, data.energy);
    document.getElementById('miner_level').innerText = data.miner_level;
    document.getElementById('miner_exp').innerText = `${data.miner_exp} / ${expNeeded}`;

    // üéØ Ensure XP bar updates correctly
    document.getElementById('xp-fill').style.width =
        Math.min(100, (data.miner_exp / expNeeded) * 100) + '%';

    // üéØ Fix: Prevent "undefined" issue
    if (data.energy_pack_level !== undefined) {
        document.getElementById('energy_pack_level').innerText = data.energy_pack_level;
    } else {
        console.warn("‚ö†Ô∏è Warning: energy_pack_level is undefined in updateUI");
    }

    document.getElementById('energy-fill').style.width =
        Math.max(0, (data.energy / (100 + (data.miner_level - 1) * 50)) * 100) + '%';

    document.getElementById('xp-fill').style.width =
        Math.min(100, (data.miner_exp / expNeeded) * 100) + '%';

    updateInventory(data.inventory);
}



   function updateInventory(items) {
    let div = document.getElementById('inventory-items');
    div.innerHTML = '';  // Clear inventory display first

    if (Object.keys(items).length) {
        Object.entries(items).forEach(([item, qty]) => {
            if (item === "Energy Pack") {
                div.innerHTML += `<button onclick="usePack()">Use ${item} (${qty})</button><br>`;
            } else {
                div.innerHTML += `${item} (${qty} uses left)<br>`;
            }
        });
    }

    // If inventory is empty, show 'Empty' text
    if (!Object.keys(items).length) {
        div.innerHTML = 'Empty';
    }
}


  async function usePack() {
    let response = await fetch('/use_energy_pack', { method: 'POST' });

    if (response.ok) {
        let data = await response.json();
        updateUI(data); // Update the UI with the latest data
    } else {
        alert((await response.json()).message); // Show an error message if any
    }
}


        function toggle(id){
            let el = document.getElementById(id);
            el.style.display = (el.style.display === 'none' || el.style.display === '') ? 'block' : 'none';
        }

   function showInfo(item) {
    let descriptions = {
        "energy": "üí° Energy Pack: Restores 50 energy when used.",
        "pickaxe": "‚õèÔ∏è Pickaxe: Allows you to mine with 2x coins for 20 taps.",  // <-- Add comma here
        "energy_upgrade": "üîã Energy Pack Upgrade: Increases energy restored per pack!"
    };

    alert(descriptions[item]);
}

async function fetchLeaderboard() {
    let response = await fetch('/leaderboard');
    if (response.ok) {
        let data = await response.json();
        updateLeaderboard(data);
    } else {
        console.error("Failed to fetch leaderboard.");
    }
}

function updateLeaderboard(data) {
    let leaderboardDiv = document.getElementById('leaderboard');
    leaderboardDiv.innerHTML = "<h3>Top Miners</h3>";

    if (data.length === 0) {
        leaderboardDiv.innerHTML += "<p>No players yet.</p>";
        return;
    }

    let leaderboardList = "<ol>";
    data.forEach(player => {
        leaderboardList += `<li>${player.name} - Level ${player.level} - ${player.coins} Coins</li>`;
    });
    leaderboardList += "</ol>";

    leaderboardDiv.innerHTML += leaderboardList;
}

// Fetch leaderboard every 10 seconds
setInterval(fetchLeaderboard, 10000);
window.onload = fetchLeaderboard;


        setInterval(fetchStatus, 1000);
        window.onload = fetchStatus;
    </script>
</body>
</html>

